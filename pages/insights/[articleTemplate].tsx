import Head from "next/head";
import React from "../../public/SVG/technologies/react.svg";
import MainMenu from "../../components/mainMenu/mainMenu";
import { theme } from "../../styles/theme";
import { footer, IMAGES_LINK, titles } from "../../constants";
import { useEffect, useState } from "react";
import HeaderArticleTemplate from "../../components/ArticleTemplatePage/HeaderArticleTemplate";
import ArticleInfo from "../../components/ArticleTemplatePage/ArticleInfo";

import News from "../../components/News";
import LetsTalk from "../../components/Services/LetsTalk";
import FooterComponent from "../../components/Footer";
import GoToTop from "../../components/GoToTop";
import { useRouter } from "next/router";
import Custom404 from "../404";
import { useMutation, useQuery } from "@apollo/client";
import { GetArticle } from "../../graphql/insights/__generated__/GetArticle";
import { GET_ARTICLE } from "../../graphql/insights/queries";
import { useIsMobile } from "../../services/hooks";
import { UPDATE_VIEWS } from "../../graphql/insights/mutations";

export interface IImpressions {
  intro: string | undefined;
  likes: number;
  exciting: number;
  valuable: number;
  unsatisfied: number;
}

const ArticleTemplate = () => {
  const router = useRouter();
  const { articleTemplate } = router.query;

  const { data, loading, error } = useQuery<GetArticle>(GET_ARTICLE, {
    variables: { url: articleTemplate },
  });

  const [updateViews] = useMutation(UPDATE_VIEWS);

  const id = data?.articles?.data[0].id;
  const entry = data?.articles?.data[0].attributes;
  const title = entry?.title;
  const categories = entry?.industries?.data;
  const publishedDate = entry?.createdAt;
  const authorEntry = entry?.author?.data?.attributes;
  const tags = entry?.tags?.data;
  const letsTalkTitle = entry?.contactUs.title;
  const letsTalkSubtitle = entry?.contactUs.subtitle;
  const relatedArticles = entry?.relatedArticles?.articles?.data;
  const relatedArticlesTitle = entry?.relatedArticles?.intro;
  const views = entry?.count.views;
  const impressions: IImpressions = {
    intro: entry?.impressions.intro,
    likes: entry?.count.likes,
    exciting: entry?.count.exciting,
    valuable: entry?.count.valuable,
    unsatisfied: entry?.count.unsatisfied,
  };

  const articleOwner = {
    img: IMAGES_LINK + authorEntry?.profilePhoto.data?.attributes?.url,
    name: authorEntry?.name || "",
    role: authorEntry?.position || "",
  };

  useEffect(() => {
    if (title) {
      const localStorageId = localStorage.getItem(title);
      if (localStorageId !== id) {
        updateViews({ variables: { id, views: views + 1 } });
      }
    }
  }, [id]);

  useEffect(() => {
    id && title && localStorage.setItem(title, id);
  }, [id, title]);

  const [menuColor, setMenuColor] = useState("none");
  const [goToTopVisible, setGoToTopVisible] = useState(false);
  const { isMobile, isTablet, isSmallTablet } = useIsMobile();

  const handleScroll = () => {
    window.scrollY >= 20
      ? setMenuColor(theme.colors.black)
      : setMenuColor("none");

    window.scrollY >= 400 ? setGoToTopVisible(true) : setGoToTopVisible(false);
  };

  useEffect(() => {
    window.addEventListener("scroll", handleScroll);

    return () => window.removeEventListener("scroll", handleScroll);
  }, []);

  const renderCondition =
    entry &&
    title &&
    categories &&
    tags &&
    letsTalkTitle &&
    letsTalkSubtitle &&
    relatedArticles &&
    relatedArticlesTitle &&
    id;

  if (loading) return null;
  if (error) return <Custom404 />;

  return (
    <>
      {renderCondition && (
        <>
          <Head>
            <title>Insights | </title>
            <meta name="description" content="Generated by create next app" />
            <link rel="icon" href="/favicon.ico" />
          </Head>
          <>
            <MainMenu
              backgroundColor={
                isMobile || isTablet || isSmallTablet
                  ? theme.colors.black
                  : menuColor
              }
              titlesColor={theme.colors.white}
              titles={titles}
            >
              <HeaderArticleTemplate
                title={title}
                categories={categories}
                publishedDate={publishedDate}
                viewed={views}
                articleOwner={articleOwner}
              />
              <ArticleInfo
                mainText={entry.content}
                tags={tags}
                impressions={impressions}
                id={id}
              />
              <News title={relatedArticlesTitle} articles={relatedArticles} />
              <LetsTalk title={letsTalkTitle} text={letsTalkSubtitle} />
              <GoToTop isVisible={goToTopVisible} />
            </MainMenu>
            <FooterComponent />
          </>
        </>
      )}
    </>
  );
};

export default ArticleTemplate;
