import Head from "next/head";
import React from "../../public/SVG/technologies/react.svg";
import MainMenu from "../../components/mainMenu/mainMenu";
import FooterComponent from "../../components/Footer";
import { theme } from "../../styles/theme";
import { footer, titles, servicesPage } from "../../constants";
import ServicesComponent from "../../components/Services";
import InformationComponent from "../../components/Services/Information";
import TechStack from "../../components/Services/TechStack";
import LetsTalk from "../../components/Services/LetsTalk";
import EstimateAppCircle from "../../components/Services/EstimateAppCircle";
import Link from "next/link";
import VerticalFullPageSlider from "../../components/common/VerticalFullPageSlider";
import { ScrollListTypes } from "../../components/common/VerticalFullPageSlider/types";
import { IInfoBlock } from "@interfaces";
import { IncModal } from "../../components/Modal";
import TextElement from "../../components/common/VerticalFullPageSlider/TextElement";
import {useEffect, useState} from 'react';
import { useQuery } from "@apollo/client";
import { GET_SERVICES_PAGE } from "../../graphql/services/queries";
import {
  GetServicesPage,
  GetServicesPage_servicesPage_data_attributes_services_data,
} from "../../graphql/services/__generated__/GetServicesPage";
import Custom404 from "../404";

function Services() {
  const { data, loading, error } = useQuery<GetServicesPage>(GET_SERVICES_PAGE);
  const entry = data?.servicesPage?.data?.attributes;
  const banner = entry?.banner;
  const slides = entry?.services?.data;
  const stackTitle = entry?.techStack.title;
  const stacks = entry?.techStack.tech_stacks?.data;

  const colorWhite = theme.colors.white;
  const colorBlack = theme.colors.black;
  const [showModal, setShowModal] = useState(false);
  const [currentSlide, setCurrentSlide] = useState(0);
  const [isMobile, setIsMobile] = useState<boolean>();

  useEffect(() => {
    const width = window.innerWidth;
    const mobileWidth = +theme.breakpoints.mobile.replace('px', '');
    const isMobile = mobileWidth > width;
    setIsMobile(isMobile);
  },[]);

  const renderSlide = (slide: GetServicesPage_servicesPage_data_attributes_services_data) => 
    <InformationComponent slide={slide as any} />;
  const renderScrollItem = () => {
      return <TextElement 
                labels={servicesPage.info as any} 
                currentSlide={currentSlide} 
                bgColor={"black"}
                onChange={(index) => {
                  setCurrentSlide(index);
                  setShowModal(true);
                }} />;
  };

  const renderCondition = entry && banner && slides && stackTitle && stacks;
  if (loading) return null;
  if (error) return <Custom404 />;


  return (
    <>
          {renderCondition && (
      <div id='Services'>
        <Head>
          <title>Incora | Services</title>
          <meta name="services" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <MainMenu
          backgroundColor={colorWhite}
          titles={titles}
          titlesColor={colorBlack}
        >
          <ServicesComponent/>
          {isMobile && <div style={{ backgroundColor: "black", width: "100%", padding: '20px' }}>
            <div id="scroll-item">{renderScrollItem()}</div>
            <div>
              {servicesPage.info.map((slide, idx) => <IncModal 
                  show={showModal && currentSlide === idx} 
                  onHide={() => {
                    setShowModal(false);
                  }} 
                  title={slide.title || ''} 
                  content={renderSlide(slide as any)} />
              )}
            </div>
          </div>}
            {!isMobile &&(<VerticalFullPageSlider
              slides={servicesPage.info as any}
              renderSlide={renderSlide}
              stickyTopPosition={120}
              scrollListType={ScrollListTypes.STRING}
              maxWidth={1006}
              bgColor={theme.colors.backgroundBlack}
            />)}
            <TechStack stacks={stacks} stackTitle={stackTitle} />
          <LetsTalk
            flexDirection={'column'}
            title={'Let’s talk!'}
            text={
              <>
                <p>Got no clue where to start?</p>
                <p> Why don’t we discuss your idea?</p>
              </>
            }
          />
        </MainMenu>
          <Link href={'estimate'}>
            <a>
              <EstimateAppCircle/>
            </a>
          </Link>
      </div>)}
        <FooterComponent {...footer}/>
    </>
  )
}

export default Services;
